{"/home/travis/build/npmtest/node-npmtest-offline-plugin/test.js":"/* istanbul instrument in package npmtest_offline_plugin */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - init-after\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - init-after\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-offline-plugin/lib.npmtest_offline_plugin.js":"/* istanbul instrument in package npmtest_offline_plugin */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_offline_plugin = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_offline_plugin = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-offline-plugin/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-offline-plugin && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_offline_plugin */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_offline_plugin\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // init-after\n    // run browser js-env code - init-after\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_offline_plugin.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_offline_plugin.rollup.js'] =\n            local.assetsDict['/assets.npmtest_offline_plugin.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_offline_plugin.__dirname + '/lib.npmtest_offline_plugin.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-offline-plugin/node_modules/offline-plugin/lib/index.js":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nvar _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }\n\nvar _appCache = require('./app-cache');\n\nvar _appCache2 = _interopRequireDefault(_appCache);\n\nvar _serviceWorker = require('./service-worker');\n\nvar _serviceWorker2 = _interopRequireDefault(_serviceWorker);\n\nvar _path2 = require('path');\n\nvar _path3 = _interopRequireDefault(_path2);\n\nvar _url = require('url');\n\nvar _url2 = _interopRequireDefault(_url);\n\nvar _deepExtend = require('deep-extend');\n\nvar _deepExtend2 = _interopRequireDefault(_deepExtend);\n\nvar _minimatch = require('minimatch');\n\nvar _minimatch2 = _interopRequireDefault(_minimatch);\n\nvar _miscUtils = require('./misc/utils');\n\nvar _loaderUtils = require('loader-utils');\n\nvar _loaderUtils2 = _interopRequireDefault(_loaderUtils);\n\nvar _slash = require('slash');\n\nvar _slash2 = _interopRequireDefault(_slash);\n\nvar _require = require('../package.json');\n\nvar pluginVersion = _require.version;\n\nvar AUTO_UPDATE_INTERVAL = 3600000;\n\nvar hasOwn = ({}).hasOwnProperty;\nvar updateStrategies = ['all', 'hash', 'changed'];\nvar defaultOptions = {\n  caches: 'all',\n  publicPath: void 0,\n  updateStrategy: 'changed',\n  responseStrategy: 'cache-first',\n  externals: [],\n  excludes: ['**/.*', '**/*.map'],\n  // Hack to have intermediate value, e.g. default one, true and false\n  relativePaths: ':relativePaths:',\n  version: null,\n  autoUpdate: false,\n\n  rewrites: function rewrites(asset) {\n    return asset.replace(/^([\\s\\S]*?)index.htm(l?)$/, function (match, dir) {\n      if ((0, _miscUtils.isAbsoluteURL)(match)) {\n        return match;\n      }\n\n      return dir || './';\n    });\n  },\n\n  cacheMaps: null,\n\n  ServiceWorker: {\n    output: 'sw.js',\n    entry: _path3['default'].join(__dirname, '../empty-entry.js'),\n    scope: null,\n    events: false,\n    prefetchRequest: {\n      credentials: 'omit',\n      headers: void 0,\n      mode: 'cors',\n      cache: void 0\n    },\n    navigateFallbackForRedirects: true\n  },\n\n  AppCache: {\n    NETWORK: '*',\n    FALLBACK: null,\n    directory: 'appcache/',\n    caches: ['main'],\n    events: false,\n    disableInstall: false,\n    includeCrossOrigin: false\n  },\n\n  // Needed for testing\n  __tests: {\n    swMetadataOnly: false,\n    ignoreRuntime: false,\n    noVersionDump: false\n  },\n\n  // Not yet used\n  alwaysRevalidate: void 0,\n  preferOnline: void 0,\n  ignoreSearch: ['**']\n};\n\nvar OfflinePlugin = (function () {\n  function OfflinePlugin(options) {\n    var _this = this;\n\n    _classCallCheck(this, OfflinePlugin);\n\n    this.options = (0, _deepExtend2['default'])({}, defaultOptions, options);\n    this.hash = null;\n    this.assets = null;\n    this.hashesMap = null;\n    this.externals = null;\n    this.publicPath = this.options.publicPath;\n    this.strategy = this.options.updateStrategy;\n    this.responseStrategy = this.options.responseStrategy;\n    this.relativePaths = this.options.relativePaths;\n    this.pluginVersion = pluginVersion;\n    this.loaders = {};\n    this.warnings = [];\n    this.errors = [];\n\n    this.__tests = this.options.__tests;\n    this.flags = {};\n\n    if (this.__tests.pluginVersion) {\n      this.pluginVersion = this.__tests.pluginVersion;\n    }\n\n    var autoUpdate = this.options.autoUpdate;\n\n    if (autoUpdate === true) {\n      this.autoUpdate = AUTO_UPDATE_INTERVAL;\n    } else if (typeof autoUpdate === 'number' && autoUpdate) {\n      this.autoUpdate = autoUpdate;\n    }\n\n    if (this.options.responseStrategy !== \"cache-first\" && this.options.responseStrategy !== \"network-first\") {\n      throw new Error('OfflinePlugin: `responseStrategy` option must use ' + '`cache-first` or `network-first` (or be undefined).');\n    }\n\n    if (typeof this.publicPath !== 'string') {\n      this.publicPath = null;\n    }\n\n    if (updateStrategies.indexOf(this.strategy) === -1) {\n      throw new Error('Update strategy must be one of [' + updateStrategies + ']');\n    } else if (this.strategy === 'hash') {\n      this.warnings.push(new Error('OfflinePlugin: `hash` update strategy is deprecated, use `all` strategy and { version: \"[hash]\" } instead'));\n\n      this.strategy = 'all';\n      this.options.version = '[hash]';\n    }\n\n    if (!Array.isArray(this.options.externals)) {\n      this.options.externals = [];\n    }\n\n    var rewrites = this.options.rewrites || defaultOptions.rewrites;\n\n    if (typeof rewrites === 'function') {\n      this.rewrite = function (asset) {\n        if (asset.indexOf(_this.entryPrefix) === 0) {\n          return '';\n        }\n\n        return rewrites(asset);\n      };\n    } else {\n      this.rewrite = function (asset) {\n        if (asset.indexOf(_this.entryPrefix) === 0) {\n          return '';\n        }\n\n        if (!hasOwn.call(rewrites, asset)) {\n          return asset;\n        }\n\n        return rewrites[asset];\n      };\n    }\n\n    this.cacheMaps = this.stringifyCacheMaps(this.options.cacheMaps);\n\n    this.REST_KEY = ':rest:';\n    this.EXTERNALS_KEY = ':externals:';\n    this.entryPrefix = '__offline_';\n    this.tools = {};\n\n    this.addTool(_serviceWorker2['default'], 'ServiceWorker');\n    this.addTool(_appCache2['default'], 'AppCache');\n\n    if (!Object.keys(this.tools).length) {\n      throw new Error('You should have at least one cache service to be specified');\n    }\n  }\n\n  _createClass(OfflinePlugin, [{\n    key: 'apply',\n    value: function apply(compiler) {\n      var _this2 = this;\n\n      var runtimePath = _path3['default'].resolve(__dirname, '../runtime.js');\n      var compilerOptions = compiler.options;\n\n      this.options.externals = this.extractLoaders(this.options.externals);\n\n      if (this.relativePaths === true) {\n        this.publicPath = null;\n      }\n\n      if (typeof this.publicPath !== 'string' && compilerOptions && compilerOptions.output && compilerOptions.output.publicPath && this.relativePaths !== true) {\n        this.publicPath = compilerOptions.output.publicPath;\n        this.relativePaths = false;\n      }\n\n      if (this.publicPath) {\n        this.publicPath = this.publicPath.replace(/\\/$/, '') + '/';\n      }\n\n      if (this.relativePaths === true && this.publicPath) {\n        this.errors.push(new Error('OfflinePlugin: `publicPath` is used in conjunction with `relativePaths`,\\n' + 'choose one of it'));\n\n        this.relativePaths = false;\n      }\n\n      if (this.relativePaths === defaultOptions.relativePaths) {\n        this.relativePaths = !this.publicPath;\n      }\n\n      this.useTools(function (tool, key) {\n        _this2.resolveToolPaths(tool, key, compiler);\n      });\n\n      compiler.plugin('normal-module-factory', function (nmf) {\n        nmf.plugin('after-resolve', function (result, callback) {\n          var resource = _path3['default'].resolve(compiler.context, result.resource);\n\n          if (resource !== runtimePath) {\n            return callback(null, result);\n          }\n\n          var data = {\n            autoUpdate: _this2.autoUpdate\n          };\n\n          _this2.useTools(function (tool, key) {\n            data[key] = tool.getConfig(_this2);\n          });\n\n          result.loaders.push(_path3['default'].join(__dirname, 'misc/runtime-loader.js') + '?' + JSON.stringify(data));\n\n          callback(null, result);\n        });\n      });\n\n      compiler.plugin('make', function (compilation, callback) {\n        if (_this2.warnings.length) {\n          [].push.apply(compilation.warnings, _this2.warnings);\n        }\n\n        if (_this2.errors.length) {\n          [].push.apply(compilation.errors, _this2.errors);\n        }\n\n        _this2.useTools(function (tool) {\n          return tool.addEntry(_this2, compilation, compiler);\n        }).then(function () {\n          callback();\n        }, function () {\n          throw new Error('Something went wrong');\n        });\n      });\n\n      compiler.plugin('emit', function (compilation, callback) {\n        var runtimeTemplatePath = _path3['default'].resolve(__dirname, '../tpls/runtime-template.js');\n\n        if (compilation.fileDependencies.indexOf(runtimeTemplatePath) === -1 && !_this2.__tests.ignoreRuntime) {\n          compilation.errors.push(new Error('OfflinePlugin: Plugin\\'s runtime wasn\\'t added to one of your bundle entries. See this https://goo.gl/YwewYp for details.'));\n          callback();\n          return;\n        }\n\n        var stats = compilation.getStats().toJson();\n\n        // By some reason errors raised here are not fatal,\n        // so we need manually try..catch and exit with error\n        try {\n          _this2.setAssets(compilation);\n          _this2.setHashesMap(compilation);\n\n          // Generate bundle hash manually (from what we have)\n          _this2.hash = _loaderUtils2['default'].getHashDigest(Object.keys(_this2.hashesMap).join(''), 'sha1');\n\n          // Not used yet\n          // this.setNetworkOptions();\n        } catch (e) {\n          callback(e);\n          return;\n        }\n\n        _this2.useTools(function (tool) {\n          return tool.apply(_this2, compilation, compiler);\n        }).then(function () {\n          callback();\n        }, function () {\n          callback(new Error('Something went wrong'));\n        });\n      });\n    }\n  }, {\n    key: 'setAssets',\n    value: function setAssets(compilation) {\n      var _this3 = this;\n\n      var caches = this.options.caches || defaultOptions.caches;\n\n      if (this.options.safeToUseOptionalCaches !== true && (caches.additional && caches.additional.length || caches.optional && caches.optional.length)) {\n        compilation.warnings.push(new Error('OfflinePlugin: Cache sections `additional` and `optional` could be used ' + 'only when each asset passed to it has unique name (e.g. hash or version in it) and ' + 'is permanently available for given URL. If you think that it\\' your case, ' + 'set `safeToUseOptionalCaches` option to `true`, to remove this warning.'));\n      }\n\n      var excludes = this.options.excludes;\n      var assets = Object.keys(compilation.assets);\n      var externals = this.options.externals;\n\n      if (Array.isArray(excludes) && excludes.length) {\n        assets = assets.filter(function (asset) {\n          if (excludes.some(function (glob) {\n            if ((0, _minimatch2['default'])(asset, glob)) {\n              return true;\n            }\n          })) {\n            return false;\n          }\n\n          return true;\n        });\n      }\n\n      this.externals = this.validatePaths(externals);\n\n      if (caches === 'all') {\n        this.assets = this.validatePaths(assets).concat(this.externals);\n        this.caches = {\n          main: this.assets.concat()\n        };\n      } else {\n        (function () {\n          var restSection = undefined;\n          var externalsSection = undefined;\n\n          var handledCaches = ['main', 'additional', 'optional'].reduce(function (result, key) {\n            var cache = Array.isArray(caches[key]) ? caches[key] : [];\n\n            if (!cache.length) {\n              result[key] = cache;\n              return result;\n            }\n\n            var cacheResult = [];\n\n            cache.some(function (cacheKey) {\n              if (cacheKey === _this3.REST_KEY) {\n                if (restSection) {\n                  throw new Error('The ' + _this3.REST_KEY + ' keyword can be used only once');\n                }\n\n                restSection = key;\n                return;\n              }\n\n              if (cacheKey === _this3.EXTERNALS_KEY) {\n                if (externalsSection) {\n                  throw new Error('The ' + _this3.EXTERNALS_KEY + ' keyword can be used only once');\n                }\n\n                externalsSection = key;\n                return;\n              }\n\n              var magic = undefined;\n\n              if (!(0, _miscUtils.isAbsoluteURL)(cacheKey) && cacheKey[0] !== '/' && cacheKey.indexOf('./') !== 0 && (magic = (0, _miscUtils.hasMagic)(cacheKey))) {\n                var matched = undefined;\n\n                for (var i = 0, len = assets.length; i < len; i++) {\n                  if (!magic.match(assets[i])) continue;\n\n                  matched = true;\n                  cacheResult.push(assets[i]);\n                  assets.splice(i, 1);\n                  i--, len--;\n                }\n\n                if (!matched) {\n                  compilation.warnings.push(new Error('OfflinePlugin: Cache pattern [' + cacheKey + '] did not match any assets'));\n                }\n\n                return;\n              }\n\n              var index = assets.indexOf(cacheKey);\n\n              __EXTERNALS_CHECK: if (index === -1) {\n                var externalsIndex = externals.indexOf(cacheKey);\n\n                if (externalsIndex !== -1) {\n                  externals.splice(externalsIndex, 1);\n                  break __EXTERNALS_CHECK;\n                }\n\n                compilation.warnings.push(new Error('OfflinePlugin: Cache asset [' + cacheKey + '] is not found in the output assets,' + 'if it\\'s an external asset, put it to the |externals| option to remove this warning'));\n              } else {\n                assets.splice(index, 1);\n              }\n\n              cacheResult.push(cacheKey);\n            });\n\n            result[key] = _this3.validatePaths(cacheResult);\n\n            return result;\n          }, {});\n\n          if (restSection && assets.length) {\n            handledCaches[restSection] = handledCaches[restSection].concat(_this3.validatePaths(assets));\n          }\n\n          if (externalsSection && externals.length) {\n            handledCaches[externalsSection] = handledCaches[externalsSection].concat(_this3.validatePaths(externals));\n          }\n\n          _this3.caches = handledCaches;\n          _this3.assets = [].concat(_this3.caches.main, _this3.caches.additional, _this3.caches.optional);\n        })();\n      }\n\n      Object.keys(this.loaders).forEach(function (loader) {\n        _this3.loaders[loader] = _this3.validatePaths(_this3.loaders[loader]);\n      });\n    }\n  }, {\n    key: 'setHashesMap',\n    value: function setHashesMap(compilation) {\n      var _this4 = this;\n\n      this.hashesMap = {};\n\n      Object.keys(compilation.assets).forEach(function (key) {\n        var validatedPath = _this4.validatePaths([key])[0];\n\n        if (typeof validatedPath !== 'string' || _this4.assets.indexOf(validatedPath) === -1) return;\n\n        var hash = _loaderUtils2['default'].getHashDigest(compilation.assets[key].source(), 'sha1');\n\n        _this4.hashesMap[hash] = validatedPath;\n      });\n    }\n  }, {\n    key: 'setNetworkOptions',\n    value: function setNetworkOptions() {\n      var alwaysRevalidate = this.options.alwaysRevalidate;\n      var preferOnline = this.options.preferOnline;\n      var ignoreSearch = this.options.ignoreSearch;\n\n      var assets = this.assets;\n\n      // Disable temporarily\n      if (Array.isArray(alwaysRevalidate) && alwaysRevalidate.length) {\n        alwaysRevalidate = assets.filter(function (asset) {\n          if (alwaysRevalidate.some(function (glob) {\n            if ((0, _minimatch2['default'])(asset, glob)) {\n              return true;\n            }\n          })) {\n            return true;\n          }\n\n          return false;\n        });\n\n        if (alwaysRevalidate.length) {\n          this.alwaysRevalidate = alwaysRevalidate;\n        }\n      }\n\n      if (Array.isArray(ignoreSearch) && ignoreSearch.length) {\n        ignoreSearch = assets.filter(function (asset) {\n          if (ignoreSearch.some(function (glob) {\n            if ((0, _minimatch2['default'])(asset, glob)) {\n              return true;\n            }\n          })) {\n            return true;\n          }\n\n          return false;\n        });\n\n        if (ignoreSearch.length) {\n          this.ignoreSearch = ignoreSearch;\n        }\n      }\n\n      if (Array.isArray(preferOnline) && preferOnline.length) {\n        preferOnline = assets.filter(function (asset) {\n          if (preferOnline.some(function (glob) {\n            if ((0, _minimatch2['default'])(asset, glob)) {\n              return true;\n            }\n          })) {\n            return true;\n          }\n\n          return false;\n        });\n\n        if (preferOnline.length) {\n          this.preferOnline = preferOnline;\n        }\n      }\n    }\n  }, {\n    key: 'extractLoaders',\n    value: function extractLoaders(assets) {\n      var _this5 = this;\n\n      var R_LOADER = /^([^\\s]+?):(\\/\\/)?/;\n\n      return assets.map(function (asset) {\n        var loaderMatch = asset.match(R_LOADER);\n\n        if (loaderMatch && !loaderMatch[2]) {\n          asset = asset.slice(loaderMatch[0].length);\n\n          var loaderName = loaderMatch[1];\n          var loader = _this5.loaders[loaderName];\n\n          if (!loader) {\n            loader = _this5.loaders[loaderName] = [];\n          }\n\n          loader.push(asset);\n        }\n\n        return asset;\n      });\n    }\n  }, {\n    key: 'stringifyCacheMaps',\n    value: function stringifyCacheMaps(cacheMaps) {\n      if (!cacheMaps) {\n        return [];\n      }\n\n      return cacheMaps.map(function (map) {\n        if (map.to != null && typeof map.to !== 'string' && typeof map.to !== 'function') {\n          throw new Error('cacheMaps `to` property must either string, function, undefined or null');\n        }\n\n        if (map.requestTypes != null) {\n          if (Array.isArray(map.requestTypes)) {\n            var types = map.requestTypes.filter(function (item) {\n              if (item === 'navigate' || item === 'same-origin' || item === 'cross-origin') {\n                return false;\n              }\n\n              return true;\n            });\n\n            if (types.length) {\n              throw new Error(\"cacheMaps `requestTypes` array values could be only: 'navigate', 'same-origin' or 'cross-origin'\");\n            }\n          } else {\n            throw new Error('cacheMaps `requestTypes` property must either array, undefined or null');\n          }\n        }\n\n        var to = undefined;\n\n        if (typeof map.to === 'function') {\n          to = map.to + '';\n        } else {\n          to = map.to ? JSON.stringify(map.to) : null;\n        }\n\n        return {\n          match: map.match + '',\n          to: to,\n          requestTypes: map.requestTypes || null\n        };\n      });\n    }\n  }, {\n    key: 'resolveToolPaths',\n    value: function resolveToolPaths(tool, key, compiler) {\n      // Tool much implement:\n      //\n      // tool.output\n      // tool.publicPath\n      // tool.basePath\n      // tool.location\n      // tool.pathRewrite\n\n      if (!this.relativePaths && !this.publicPath) {\n        throw new Error('OfflinePlugin: Cannot generate base path for ' + key);\n      }\n\n      var isDirectory = tool.output[tool.output.length - 1] === '/';\n\n      if (this.relativePaths) {\n        var compilerOutput = (compiler.options.output || { path: process.cwd() }).path;\n        var absoluteOutput = _path3['default'].resolve(compilerOutput, tool.output);\n\n        var relativeBase = undefined;\n\n        if (isDirectory) {\n          relativeBase = _path3['default'].relative(absoluteOutput, compilerOutput);\n        } else {\n          relativeBase = _path3['default'].relative(_path3['default'].dirname(absoluteOutput), compilerOutput);\n        }\n\n        relativeBase = (0, _slash2['default'])(relativeBase);\n        relativeBase = relativeBase.replace(/\\/$/, '');\n\n        if (relativeBase) {\n          relativeBase = relativeBase + '/';\n        }\n\n        tool.basePath = relativeBase[0] === '.' ? relativeBase : './' + relativeBase;\n      } else if (this.publicPath) {\n        tool.basePath = this.publicPath.replace(/\\/$/, '') + '/';\n      }\n\n      if (this.relativePaths) {\n        tool.location = tool.output;\n      } else if (this.publicPath && tool.publicPath) {\n        tool.location = tool.publicPath;\n      } else if (this.publicPath) {\n        var publicUrl = _url2['default'].parse(this.publicPath);\n        var publicPath = publicUrl.pathname;\n\n        publicUrl.pathname = _path3['default'].join(publicPath, tool.output);\n        var outerPathname = _path3['default'].join('/outer/', publicPath, tool.output);\n\n        if (outerPathname.indexOf('/outer/') !== 0) {\n          new Error('OfflinePlugin: Wrong ' + key + '.output value. Final ' + key + '.location URL path bounds are outside of publicPath');\n        }\n\n        tool.location = _url2['default'].format(publicUrl);\n      }\n\n      if (this.relativePaths) {\n        tool.pathRewrite = function (_path) {\n          if ((0, _miscUtils.isAbsoluteURL)(_path) || _path[0] === '/') {\n            return _path;\n          }\n\n          return tool.basePath + _path;\n        };\n      } else {\n        tool.pathRewrite = function (path) {\n          return path;\n        };\n      }\n    }\n  }, {\n    key: 'validatePaths',\n    value: function validatePaths(assets) {\n      var _this6 = this;\n\n      return assets.map(this.rewrite).filter(function (asset) {\n        return !!asset;\n      }).map(function (key) {\n        // If absolute url, use it as is\n        if ((0, _miscUtils.isAbsoluteURL)(key)) {\n          return key;\n        }\n\n        if (_this6.relativePaths) {\n          return key.replace(/^\\.\\//, '');\n        }\n\n        // Absolute path, use it as is\n        if (key[0] === '/') {\n          return key;\n        }\n\n        return _this6.publicPath + key.replace(/^\\.?\\//, '');\n      });\n    }\n  }, {\n    key: 'useTools',\n    value: function useTools(fn) {\n      var _this7 = this;\n\n      var tools = Object.keys(this.tools).map(function (tool) {\n        return fn(_this7.tools[tool], tool);\n      });\n\n      return Promise.all(tools);\n    }\n  }, {\n    key: 'addTool',\n    value: function addTool(Tool, name) {\n      var options = this.options[name];\n\n      if (options === null || options === false) {\n        // tool is not needed\n        return;\n      }\n\n      this.tools[name] = new Tool(options);\n    }\n  }, {\n    key: 'version',\n    get: function get() {\n      var version = this.options.version;\n      var hash = this.hash;\n\n      if (version == null) {\n        return new Date().toLocaleString();\n      }\n\n      if (typeof version === 'function') {\n        return version(this);\n      }\n\n      return (0, _miscUtils.interpolateString)(version, { hash: hash });\n    }\n  }]);\n\n  return OfflinePlugin;\n})();\n\nexports['default'] = OfflinePlugin;\n\nOfflinePlugin.defaultOptions = defaultOptions;\nmodule.exports = exports['default'];","/home/travis/build/npmtest/node-npmtest-offline-plugin/node_modules/offline-plugin/lib/app-cache.js":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nvar _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }\n\nvar _miscUtils = require('./misc/utils');\n\nvar _fs = require('fs');\n\nvar _fs2 = _interopRequireDefault(_fs);\n\nvar _path = require('path');\n\nvar _path2 = _interopRequireDefault(_path);\n\nvar AppCache = (function () {\n  function AppCache(options) {\n    _classCallCheck(this, AppCache);\n\n    var output = options.output || options.directory;\n\n    if ((0, _miscUtils.isAbsolutePath)(output)) {\n      throw new Error('OfflinePlugin: ServiceWorker.output option must be a relative path, ' + 'but an absolute path was passed');\n    }\n\n    this.output = output.replace(/^\\//, '').replace(/\\/$/, '') + '/';\n    this.publicPath = options.publicPath;\n\n    this.basePath = null;\n    this.location = null;\n    this.pathRewrite = null;\n\n    // Tool specific properties\n    this.NETWORK = options.NETWORK;\n    this.FALLBACK = options.FALLBACK;\n    this.name = 'manifest';\n    this.caches = options.caches;\n    this.events = !!options.events;\n    this.disableInstall = options.disableInstall;\n    this.includeCrossOrigin = options.includeCrossOrigin;\n  }\n\n  _createClass(AppCache, [{\n    key: 'addEntry',\n    value: function addEntry(plugin, compilation, compiler) {\n      // no-op\n      return Promise.resolve();\n    }\n  }, {\n    key: 'apply',\n    value: function apply(plugin, compilation, compiler) {\n      if (!Array.isArray(this.caches)) {\n        throw new Error('AppCache caches must be an array');\n      }\n\n      var pathRewrite = this.pathRewrite;\n      var cache = (this.caches.reduce(function (result, name) {\n        var cache = plugin.caches[name];\n        if (!cache || !cache.length) return result;\n\n        if (result) {\n          result = result.concat(cache);\n        } else {\n          result = cache;\n        }\n\n        return result;\n      }, null) || []).map(pathRewrite);\n\n      var path = this.output + this.name;\n      var manifest = this.getManifestTemplate(cache, plugin);\n      var content = this.getPageContent();\n      var page = this.getPageTemplate(this.name, content);\n\n      compilation.assets[path + '.appcache'] = (0, _miscUtils.getSource)(manifest);\n      compilation.assets[path + '.html'] = (0, _miscUtils.getSource)(page);\n    }\n  }, {\n    key: 'getManifestTemplate',\n    value: function getManifestTemplate(cache, plugin) {\n      var _this = this;\n\n      var tag = '#ver:' + plugin.version;\n\n      if (plugin.pluginVersion && !plugin.__tests.noVersionDump) {\n        tag += '\\n' + '#plugin:' + plugin.pluginVersion;\n      }\n\n      var FALLBACK = '';\n      var NETWORK = '';\n\n      if (this.NETWORK) {\n        NETWORK = 'NETWORK:\\n' + (Array.isArray(this.NETWORK) ? this.NETWORK.join('\\n') : this.NETWORK + '');\n      }\n\n      if (this.FALLBACK) {\n        FALLBACK = 'FALLBACK:\\n' + Object.keys(this.FALLBACK).map(function (path) {\n          return path + ' ' + _this.FALLBACK[path];\n        }).join('\\n');\n      }\n\n      if (!this.includeCrossOrigin) {\n        cache = cache.filter(function (asset) {\n          if ((0, _miscUtils.isAbsoluteURL)(asset) && (_this.basePath === '/' || asset.indexOf(_this.basePath) !== 0)) {\n            return false;\n          }\n\n          return true;\n        });\n      }\n\n      return ('\\n      CACHE MANIFEST\\n      ' + tag + '\\n\\n      CACHE:\\n      ' + cache.join('\\n') + '\\n\\n      ' + NETWORK + '\\n\\n      ' + FALLBACK + '\\n    ').trim().replace(/^      */gm, '');\n    }\n  }, {\n    key: 'getPageTemplate',\n    value: function getPageTemplate(name, content) {\n      return ('\\n      <!doctype html>\\n      <html manifest=\"' + name + '.appcache\">' + (content || '') + '</html>\\n    ').trim().replace(/^      */gm, '');\n    }\n  }, {\n    key: 'getPageContent',\n    value: function getPageContent() {\n      if (this.events) {\n        return _fs2['default'].readFileSync(_path2['default'].join(__dirname, '../tpls/appcache-frame.tpl'), 'utf-8');\n      } else {\n        return '';\n      }\n    }\n  }, {\n    key: 'getConfig',\n    value: function getConfig(plugin) {\n      return {\n        location: this.location,\n        name: this.name,\n        events: this.events,\n        disableInstall: this.disableInstall\n      };\n    }\n  }]);\n\n  return AppCache;\n})();\n\nexports['default'] = AppCache;\nmodule.exports = exports['default'];","/home/travis/build/npmtest/node-npmtest-offline-plugin/node_modules/offline-plugin/lib/misc/utils.js":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nexports.hasMagic = hasMagic;\nexports.getSource = getSource;\nexports.interpolateString = interpolateString;\nexports.isAbsoluteURL = isAbsoluteURL;\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nvar _minimatch = require('minimatch');\n\nvar _path = require('path');\n\nvar _path2 = _interopRequireDefault(_path);\n\nvar isAbsolutePath = _path2['default'].isAbsolute;\n\n// Based on https://github.com/isaacs/node-glob/blob/master/glob.js#L83\n// (glob.hasMagic)\n\nfunction hasMagic(pattern, options) {\n  var minimatch = new _minimatch.Minimatch(pattern, options);\n  var set = minimatch.set;\n\n  if (set.length > 1) {\n    return minimatch;\n  }\n\n  for (var j = 0; j < set[0].length; j++) {\n    if (typeof set[0][j] !== 'string') {\n      return minimatch;\n    }\n  }\n\n  return false;\n}\n\nfunction getSource(_source) {\n  return {\n    source: function source() {\n      return _source;\n    },\n    size: function size() {\n      return Buffer.byteLength(_source, 'utf8');\n    }\n  };\n}\n\nfunction interpolateString(string, data) {\n  var hasOwnProperty = ({}).hasOwnProperty;\n\n  return (string + '').replace(/\\[(\\w+?)\\]/g, function (match, key) {\n    if (hasOwnProperty.call(data, key)) {\n      return data[key];\n    }\n\n    return '';\n  });\n}\n\nfunction isAbsoluteURL(url) {\n  return (/^(?:\\w+:)?\\/\\//.test(url)\n  );\n}\n\nexports.isAbsolutePath = isAbsolutePath;","/home/travis/build/npmtest/node-npmtest-offline-plugin/node_modules/offline-plugin/lib/service-worker.js":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nvar _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }\n\nvar _webpackLibSingleEntryPlugin = require('webpack/lib/SingleEntryPlugin');\n\nvar _webpackLibSingleEntryPlugin2 = _interopRequireDefault(_webpackLibSingleEntryPlugin);\n\nvar _path = require('path');\n\nvar _path2 = _interopRequireDefault(_path);\n\nvar _webpack = require('webpack');\n\nvar _webpack2 = _interopRequireDefault(_webpack);\n\nvar _deepExtend = require('deep-extend');\n\nvar _deepExtend2 = _interopRequireDefault(_deepExtend);\n\nvar _miscUtils = require('./misc/utils');\n\nvar ServiceWorker = (function () {\n  function ServiceWorker(options) {\n    _classCallCheck(this, ServiceWorker);\n\n    if ((0, _miscUtils.isAbsolutePath)(options.output)) {\n      throw new Error('OfflinePlugin: ServiceWorker.output option must be a relative path, ' + 'but an absolute path was passed');\n    }\n\n    this.output = options.output.replace(/^\\.\\/+/, '');\n    this.publicPath = options.publicPath;\n\n    this.basePath = null;\n    this.location = null;\n    this.pathRewrite = null;\n\n    // Tool specific properties\n    this.entry = options.entry;\n    this.scope = options.scope ? options.scope + '' : void 0;\n    this.events = !!options.events;\n    this.navigateFallbackURL = options.navigateFallbackURL;\n    this.navigateFallbackForRedirects = options.navigateFallbackForRedirects;\n    this.prefetchRequest = this.validatePrefetch(options.prefetchRequest);\n\n    var cacheNameQualifier = '';\n\n    if (options.cacheName) {\n      cacheNameQualifier = ':' + options.cacheName;\n    }\n\n    this.ENTRY_NAME = 'serviceworker';\n    this.CACHE_NAME = 'webpack-offline' + cacheNameQualifier;\n    this.SW_DATA_VAR = '__wpo';\n  }\n\n  _createClass(ServiceWorker, [{\n    key: 'addEntry',\n    value: function addEntry(plugin, compilation, compiler) {\n      if (!this.entry) return Promise.resolve();\n\n      var name = plugin.entryPrefix + this.ENTRY_NAME;\n      var childCompiler = compilation.createChildCompiler(name, {\n        // filename: this.output\n        filename: name\n      });\n\n      var data = JSON.stringify({\n        data_var_name: this.SW_DATA_VAR,\n        loaders: Object.keys(plugin.loaders),\n        cacheMaps: plugin.cacheMaps\n      });\n\n      var loader = '!!' + _path2['default'].join(__dirname, 'misc/sw-loader.js') + '?json=' + escape(data);\n      var entry = loader + '!' + this.entry;\n\n      childCompiler.context = compiler.context;\n      childCompiler.apply(new _webpackLibSingleEntryPlugin2['default'](compiler.context, entry, name));\n\n      (compiler.options.plugins || []).some(function (plugin) {\n        if (plugin instanceof _webpack2['default'].optimize.UglifyJsPlugin) {\n          var options = (0, _deepExtend2['default'])({}, plugin.options);\n\n          options.test = new RegExp(name);\n          childCompiler.apply(new _webpack2['default'].optimize.UglifyJsPlugin(options));\n\n          return true;\n        }\n      });\n\n      // Needed for HMR. offline-plugin doesn't support it,\n      // but added just in case to prevent other errors\n      childCompiler.plugin('compilation', function (compilation) {\n        if (compilation.cache) {\n          if (!compilation.cache[name]) {\n            compilation.cache[name] = {};\n          }\n\n          compilation.cache = compilation.cache[name];\n        }\n      });\n\n      return new Promise(function (resolve, reject) {\n        childCompiler.runAsChild(function (err, entries, childCompilation) {\n          if (err) {\n            reject(err);\n            return;\n          }\n\n          resolve();\n        });\n      });\n    }\n  }, {\n    key: 'apply',\n    value: function apply(plugin, compilation, compiler) {\n      var minify = (compiler.options.plugins || []).some(function (plugin) {\n        return plugin instanceof _webpack2['default'].optimize.UglifyJsPlugin;\n      });\n\n      var source = this.getDataTemplate(plugin.caches, plugin, minify);\n\n      if (this.entry) {\n        var _name = plugin.entryPrefix + this.ENTRY_NAME;\n        var asset = compilation.assets[_name];\n\n        if (!asset) {\n          compilation.errors.push(new Error('OfflinePlugin: ServiceWorker entry is not found in output assets'));\n\n          return;\n        }\n\n        delete compilation.assets[_name];\n\n        if (!plugin.__tests.swMetadataOnly) {\n          source += '\\n\\n' + asset.source();\n        }\n      }\n\n      compilation.assets[this.output] = (0, _miscUtils.getSource)(source);\n    }\n  }, {\n    key: 'getDataTemplate',\n    value: function getDataTemplate(data, plugin, minify) {\n      var rewriteFunction = this.pathRewrite;\n\n      var cache = function cache(key) {\n        return (data[key] || []).map(rewriteFunction);\n      };\n\n      var hashesMap = Object.keys(plugin.hashesMap).reduce(function (result, hash) {\n        var asset = plugin.hashesMap[hash];\n\n        result[hash] = rewriteFunction(asset);\n        return result;\n      }, {});\n\n      var externals = plugin.externals.map(rewriteFunction);\n\n      var pluginVersion = undefined;\n\n      if (plugin.pluginVersion && !plugin.__tests.noVersionDump) {\n        pluginVersion = plugin.pluginVersion;\n      }\n\n      var loaders = Object.keys(plugin.loaders).length ? plugin.loaders : void 0;\n\n      return ('\\n      var ' + this.SW_DATA_VAR + ' = ' + JSON.stringify({\n        assets: {\n          main: cache('main'),\n          additional: cache('additional'),\n          optional: cache('optional')\n        },\n\n        externals: externals,\n\n        hashesMap: hashesMap,\n        navigateFallbackURL: this.navigateFallbackURL,\n        navigateFallbackForRedirects: this.navigateFallbackURL ? this.navigateFallbackForRedirects : void 0,\n\n        strategy: plugin.strategy,\n        responseStrategy: plugin.responseStrategy,\n        version: plugin.version,\n        name: this.CACHE_NAME,\n        pluginVersion: pluginVersion,\n        relativePaths: plugin.relativePaths,\n\n        prefetchRequest: this.prefetchRequest,\n        loaders: loaders,\n\n        // These aren't added\n        alwaysRevalidate: plugin.alwaysRevalidate,\n        preferOnline: plugin.preferOnline,\n        ignoreSearch: plugin.ignoreSearch\n      }, null, minify ? void 0 : '  ') + ';\\n    ').trim();\n    }\n  }, {\n    key: 'getConfig',\n    value: function getConfig(plugin) {\n      return {\n        location: this.location,\n        scope: this.scope,\n        events: this.events\n      };\n    }\n  }, {\n    key: 'validatePrefetch',\n    value: function validatePrefetch(request) {\n      if (!request) {\n        return void 0;\n      }\n\n      if (request.credentials === 'omit' && request.headers === void 0 && request.mode === 'cors' && request.cache === void 0) {\n        return void 0;\n      }\n\n      return {\n        credentials: request.credentials,\n        headers: request.headers,\n        mode: request.mode,\n        cache: request.cache\n      };\n    }\n  }]);\n\n  return ServiceWorker;\n})();\n\nexports['default'] = ServiceWorker;\nmodule.exports = exports['default'];","/home/travis/build/npmtest/node-npmtest-offline-plugin/node_modules/offline-plugin/empty-entry.js":"","/home/travis/build/npmtest/node-npmtest-offline-plugin/node_modules/offline-plugin/runtime.js":"var warn = \"offline-plugin: runtime was installed without OfflinePlugin being added to the webpack.config.js. See https://goo.gl/2Ca7NO for details.\";\n\nif (window.console) {\n  if (console.info) {\n    console.info(warn);\n  } else if (console.log) {\n    console.log(warn);\n  }\n}\n\nexports.install = function() {};\nexports.applyUpdate = function() {};\nexports.update = function() {};","/home/travis/build/npmtest/node-npmtest-offline-plugin/node_modules/offline-plugin/tpls/runtime-template.js":"var appCacheIframe;\n\nfunction hasSW() {\n  return 'serviceWorker' in navigator &&\n    // This is how I block Chrome 40 and detect Chrome 41, because first has\n    // bugs with history.pustState and/or hashchange\n    (window.fetch || 'imageRendering' in document.documentElement.style) &&\n    (window.location.protocol === 'https:' || window.location.hostname === 'localhost' || window.location.hostname === '127.0.0.1')\n}\n\nfunction install(options) {\n  options || (options = {});\n\n  <% if (typeof ServiceWorker !== 'undefined') { %>\n    if (hasSW()) {\n      var registration = navigator.serviceWorker\n        .register(\n          <%- JSON.stringify(ServiceWorker.location) %>\n          <% if (ServiceWorker.scope) { %>\n            , { scope: <%- JSON.stringify(ServiceWorker.scope) %> }\n          <% } %>\n        );\n\n      <% if (ServiceWorker.events) { %>\n        var handleUpdating = function(registration) {\n          var sw = registration.installing || registration.waiting;\n          var ignoreInstalling;\n          var ignoreWaiting;\n\n          // No SW or already handled\n          if (!sw || sw.onstatechange) return;\n\n          var stateChangeHandler;\n\n          // Already has SW\n          if (registration.active) {\n            onUpdateStateChange();\n            stateChangeHandler = onUpdateStateChange;\n          } else {\n            onInstallStateChange();\n            stateChangeHandler = onInstallStateChange;\n          }\n\n          ignoreInstalling = true;\n          if (registration.waiting) {\n            ignoreWaiting = true;\n          }\n\n          sw.onstatechange = stateChangeHandler;\n\n          function onUpdateStateChange() {\n            switch (sw.state) {\n              case 'redundant': {\n                sendEvent('onUpdateFailed');\n                sw.onstatechange = null;\n              } break;\n\n              case 'installing': {\n                if (!ignoreInstalling) {\n                  sendEvent('onUpdating');\n                }\n              } break;\n\n              case 'installed': {\n                if (!ignoreWaiting) {\n                  sendEvent('onUpdateReady');\n                }\n              } break;\n\n              case 'activated': {\n                sendEvent('onUpdated');\n                sw.onstatechange = null;\n              } break;\n            }\n          }\n\n          function onInstallStateChange() {\n            switch (sw.state) {\n              case 'redundant': {\n                // Failed to install, ignore\n                sw.onstatechange = null;\n              } break;\n\n              case 'installing': {\n                // Installing, ignore\n              } break;\n\n              case 'installed': {\n                // Installed, wait activation\n              } break;\n\n              case 'activated': {\n                sendEvent('onInstalled');\n                sw.onstatechange = null;\n              } break;\n            }\n          }\n        };\n\n        var sendEvent = function(event) {\n          if (typeof options[event] === 'function') {\n            options[event]({\n              source: 'ServiceWorker'\n            });\n          }\n        };\n\n        registration.then(function(reg) {\n          // WTF no reg?\n          if (!reg) return;\n\n          // Installed but Shift-Reloaded (page is not controller by SW),\n          // update might be ready at this point (more than one tab opened).\n          // Anyway, if page is hard-reloaded, then it probably already have latest version\n          // but it's not controlled by SW yet. Applying update will claim this page\n          // to be controlled by SW. Maybe set flag to not reload it?\n          // if (!navigator.serviceWorker.controller) return;\n\n          handleUpdating(reg);\n          reg.onupdatefound = function() {\n            handleUpdating(reg);\n          };\n        }).catch(function(err) {\n          sendEvent('onError');\n          return Promise.reject(err);\n        });\n      <% } %>\n\n      return;\n    }\n  <% } %>\n\n  <% if (typeof AppCache !== 'undefined' && AppCache.disableInstall !== true) { %>\n    if (window.applicationCache) {\n      var directory = <%- JSON.stringify(AppCache.location) %>;\n      var name = <%- JSON.stringify(AppCache.name) %>;\n\n      var doLoad = function() {\n        var page = directory + name + '.html';\n        var iframe = document.createElement('iframe');\n\n        <% if (AppCache.events) { %>\n          window.addEventListener('message', function(e) {\n            if (e.source !== iframe.contentWindow) return;\n\n            var match = (e.data + '').match(/__offline-plugin_AppCacheEvent:(\\w+)/);\n            var event = match[1];\n\n            if (typeof options[event] === 'function') {\n              options[event]({\n                source: 'AppCache'\n              });\n            }\n          });\n        <% } %>\n\n        iframe.src = page;\n        iframe.style.display = 'none';\n\n        appCacheIframe = iframe;\n        document.body.appendChild(iframe);\n      };\n\n      if (document.readyState === 'complete') {\n        setTimeout(doLoad);\n      } else {\n        window.addEventListener('load', doLoad);\n      }\n\n      return;\n    }\n  <% } %>\n}\n\nfunction applyUpdate(callback, errback) {\n  <% if (typeof ServiceWorker !== 'undefined' && ServiceWorker.events) { %>\n    if (hasSW()) {\n      navigator.serviceWorker.getRegistration().then(function(registration) {\n        if (!registration || !registration.waiting) {\n          errback && errback();\n          return;\n        }\n\n        registration.waiting.postMessage({\n          action: 'skipWaiting'\n        });\n\n        callback && callback();\n      });\n\n      return;\n    }\n  <% } %>\n\n  <% if (typeof AppCache !== 'undefined' && AppCache.events && AppCache.disableInstall !== true) { %>\n    if (appCacheIframe) {\n      try {\n        appCacheIframe.contentWindow.__applyUpdate();\n        callback && setTimeout(callback);\n      } catch (e) {\n        errback && setTimeout(errback);\n      }\n    }\n  <% } %>\n}\n\nfunction update() {\n  <% if (typeof ServiceWorker !== 'undefined') { %>\n    if (hasSW()) {\n      navigator.serviceWorker.getRegistration().then(function(registration) {\n        if (!registration) return;\n        return registration.update();\n      });\n    }\n  <% } %>\n\n  <% if (typeof AppCache !== 'undefined' && AppCache.disableInstall !== true) { %>\n    if (appCacheIframe) {\n      try {\n        appCacheIframe.contentWindow.applicationCache.update();\n      } catch (e) {}\n    }\n  <% } %>\n}\n\n<% if (typeof autoUpdate !== 'undefined') { %>\n  setInterval(update, <%- autoUpdate %>);\n<% } %>\n\nexports.install = install;\nexports.applyUpdate = applyUpdate;\nexports.update = update;\n","/home/travis/build/npmtest/node-npmtest-offline-plugin/node_modules/offline-plugin/lib/loaders/fonts-css.js":"'use strict';\n\nvar R_FONT_FACE = /\\@font-face\\s*\\{([\\s\\S]*?)\\}/g;\nvar R_CSS_PAIR = /\\s*([a-zA-Z\\-]+)\\s*:\\s*([\\s\\S]+?)\\s*(?:;|$)/g;\nvar R_URL_SRC = /^\\s*url\\(([\\s\\S]*?)\\)(?:\\s+format\\(([\\s\\S]*?)\\))?\\s*$/;\n\nmodule.exports = function fontsCssLoader(response) {\n  return response.text().then(function (text) {\n    var fonts = parseStylesheet(text);\n    var urls = extractFontURLs(fonts);\n\n    return urls;\n  });\n};\n\nfunction parseStylesheet(content) {\n  var fonts = [];\n  var face = undefined;\n\n  if (!content) {\n    return fonts;\n  }\n\n  while (face = R_FONT_FACE.exec(content)) {\n    var font = {};\n    var faceData = face[1].trim();\n    var pair = undefined;\n\n    while (pair = R_CSS_PAIR.exec(faceData)) {\n      var prop = pair[1].replace('font-', '');\n      var val = pair[2];\n\n      if (prop === 'unicode-range') {\n        font.unicodeRange = val;\n      } else if (prop === 'feature-settings') {\n        font.featureSettings = val;\n      } else {\n        font[prop] = prop === 'family' ? val.replace(/'|\"/g, '') : val;\n      }\n    }\n\n    fonts.push(font);\n  }\n\n  return fonts;\n}\n\nfunction extractFontURLs(fonts) {\n  var urls = [];\n\n  if (!fonts.length) {\n    return urls;\n  }\n\n  fonts.forEach(function (font) {\n    var sources = parseSources(font);\n    if (!sources) return;\n\n    sources.url.forEach(function (source) {\n      source = parseUrlSource(source);\n\n      if (source[0]) {\n        urls.push(source[0]);\n      }\n    });\n  });\n\n  return urls;\n}\n\nfunction parseSources(font) {\n  if (!font || !font.src) {\n    return;\n  }\n\n  var sources = font.src.trim().split(/\\s*,\\s*/);\n\n  var localSources = [];\n  var urlSources = [];\n\n  for (var i = 0, len = sources.length; i < len; i++) {\n    var source = sources[i];\n\n    if (source.indexOf('local') === 0) {\n      localSources.push(source);\n    } else {\n      urlSources.push(source);\n    }\n  }\n\n  return {\n    local: localSources,\n    url: urlSources\n  };\n}\n\nfunction parseUrlSource(source) {\n  var match = source && source.match(R_URL_SRC);\n\n  if (!match) {\n    return [];\n  }\n\n  return [match[1] && match[1].replace(/'|\"/g, ''), match[2] && match[2].replace(/'|\"/g, '')];\n}","/home/travis/build/npmtest/node-npmtest-offline-plugin/node_modules/offline-plugin/lib/loaders/index.js":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nexports['default'] = ['fonts-css'].reduce(function (result, loader) {\n  var mod = require('./' + loader);\n  result[loader] = mod['default'] || mod;\n}, {});\nmodule.exports = exports['default'];","/home/travis/build/npmtest/node-npmtest-offline-plugin/node_modules/offline-plugin/lib/misc/runtime-loader.js":"'use strict';\n\nvar ejs = require('ejs');\nvar path = require('path');\nvar fs = require('fs');\n\nmodule.exports = function () {};\nmodule.exports.pitch = function (remainingRequest, precedingRequest, data) {\n  this.cacheable && this.cacheable();\n\n  var callback = this.async();\n  var params = JSON.parse(this.query.slice(1));\n  var templatePath = path.join(__dirname, '../../tpls/runtime-template.js');\n\n  this.addDependency(templatePath);\n\n  fs.readFile(templatePath, 'utf-8', function (err, template) {\n    if (err) return callback(err);\n\n    template = ejs.render(template, params);\n    callback(null, template);\n  });\n};","/home/travis/build/npmtest/node-npmtest-offline-plugin/node_modules/offline-plugin/lib/misc/sw-loader.js":"'use strict';\n\nvar path = require('path');\nvar fs = require('fs');\nvar loaderUtils = require('loader-utils');\n\nmodule.exports = function () {};\nmodule.exports.pitch = function pitch(remainingRequest, precedingRequest, data) {\n  var _this = this;\n\n  this.cacheable && this.cacheable();\n\n  var callback = this.async();\n  var templatePath = path.join(__dirname, 'sw-template.js');\n  var query = loaderUtils.parseQuery(this.query);\n  var params = JSON.parse(query.json);\n\n  var request = loaderUtils.stringifyRequest(this, remainingRequest);\n  var source = 'module.exports = require(' + request + ')';\n\n  var loaders = (params.loaders || []).map(function (loader) {\n    var loaderPath = path.join(__dirname, '../loaders', loader + '.js');\n    var loaderRequest = loaderUtils.stringifyRequest(_this, '!!' + loaderPath);\n\n    _this.addDependency(loaderPath);\n\n    return JSON.stringify(loader) + ': require(' + loaderRequest + ')';\n  });\n\n  var cacheMaps = (params.cacheMaps || []).map(function (map) {\n    return '{\\n      match: ' + map.match + ',\\n      to: ' + map.to + ',\\n      requestTypes: ' + JSON.stringify(map.requestTypes) + ',\\n    }';\n  });\n\n  this.addDependency(templatePath);\n\n  var loadersCode = '{}';\n\n  if (loaders.length) {\n    loadersCode = '{\\n      ' + loaders.join(',\\n') + '\\n    }';\n  }\n\n  var cacheMapsCode = '[]';\n\n  if (cacheMaps.length) {\n    cacheMapsCode = '[\\n      ' + cacheMaps.join(',\\n') + '\\n    ]';\n  }\n\n  var helpersCode = [', {', 'loaders: ' + loadersCode + ',', 'cacheMaps: ' + cacheMapsCode + ',', '}'];\n\n  fs.readFile(templatePath, 'utf-8', function (err, template) {\n    if (err) return callback(err);\n\n    template = '\\n      ' + template + '\\n      WebpackServiceWorker(' + params.data_var_name + helpersCode.join('\\n') + ');\\n      ' + source + '\\n    ';\n\n    callback(null, template);\n  });\n};","/home/travis/build/npmtest/node-npmtest-offline-plugin/node_modules/offline-plugin/lib/misc/sw-polyfill.js":"\"use strict\";","/home/travis/build/npmtest/node-npmtest-offline-plugin/node_modules/offline-plugin/lib/misc/sw-template.js":"'use strict';\n\nif (typeof DEBUG === 'undefined') {\n  var DEBUG = false;\n}\n\nfunction WebpackServiceWorker(params, helpers) {\n  var loaders = helpers.loaders;\n  var cacheMaps = helpers.cacheMaps;\n\n  var strategy = params.strategy;\n  var responseStrategy = params.responseStrategy;\n\n  var assets = params.assets;\n  var loadersMap = params.loaders || {};\n\n  var hashesMap = params.hashesMap;\n  var externals = params.externals;\n\n  // Not used yet\n  // const alwaysRevalidate = params.alwaysRevalidate;\n  // const ignoreSearch = params.ignoreSearch;\n  // const preferOnline = params.preferOnline;\n\n  var CACHE_PREFIX = params.name;\n  var CACHE_TAG = params.version;\n  var CACHE_NAME = CACHE_PREFIX + ':' + CACHE_TAG;\n\n  var STORED_DATA_KEY = '__offline_webpack__data';\n\n  mapAssets();\n\n  var allAssets = [].concat(assets.main, assets.additional, assets.optional);\n  var navigateFallbackURL = params.navigateFallbackURL;\n  var navigateFallbackForRedirects = params.navigateFallbackForRedirects;\n\n  self.addEventListener('install', function (event) {\n    console.log('[SW]:', 'Install event');\n\n    var installing = undefined;\n\n    if (strategy === 'changed') {\n      installing = cacheChanged('main');\n    } else {\n      installing = cacheAssets('main');\n    }\n\n    event.waitUntil(installing);\n  });\n\n  self.addEventListener('activate', function (event) {\n    console.log('[SW]:', 'Activate event');\n\n    var activation = cacheAdditional();\n\n    // Delete all assets which name starts with CACHE_PREFIX and\n    // is not current cache (CACHE_NAME)\n    activation = activation.then(storeCacheData);\n    activation = activation.then(deleteObsolete);\n    activation = activation.then(function () {\n      if (self.clients && self.clients.claim) {\n        return self.clients.claim();\n      }\n    });\n\n    event.waitUntil(activation);\n  });\n\n  function cacheAdditional() {\n    if (!assets.additional.length) {\n      return Promise.resolve();\n    }\n\n    if (DEBUG) {\n      console.log('[SW]:', 'Caching additional');\n    }\n\n    var operation = undefined;\n\n    if (strategy === 'changed') {\n      operation = cacheChanged('additional');\n    } else {\n      operation = cacheAssets('additional');\n    }\n\n    // Ignore fail of `additional` cache section\n    return operation['catch'](function (e) {\n      console.error('[SW]:', 'Cache section `additional` failed to load');\n    });\n  }\n\n  function cacheAssets(section) {\n    var batch = assets[section];\n\n    return caches.open(CACHE_NAME).then(function (cache) {\n      return addAllNormalized(cache, batch, {\n        bust: params.version,\n        request: params.prefetchRequest\n      });\n    }).then(function () {\n      logGroup('Cached assets: ' + section, batch);\n    })['catch'](function (e) {\n      console.error(e);\n      throw e;\n    });\n  }\n\n  function cacheChanged(section) {\n    return getLastCache().then(function (args) {\n      if (!args) {\n        return cacheAssets(section);\n      }\n\n      var lastCache = args[0];\n      var lastKeys = args[1];\n      var lastData = args[2];\n\n      var lastMap = lastData.hashmap;\n      var lastVersion = lastData.version;\n\n      if (!lastData.hashmap || lastVersion === params.version) {\n        return cacheAssets(section);\n      }\n\n      var lastHashedAssets = Object.keys(lastMap).map(function (hash) {\n        return lastMap[hash];\n      });\n\n      var lastUrls = lastKeys.map(function (req) {\n        var url = new URL(req.url);\n        url.search = '';\n\n        return url.toString();\n      });\n\n      var sectionAssets = assets[section];\n      var moved = [];\n      var changed = sectionAssets.filter(function (url) {\n        if (lastUrls.indexOf(url) === -1 || lastHashedAssets.indexOf(url) === -1) {\n          return true;\n        }\n\n        return false;\n      });\n\n      Object.keys(hashesMap).forEach(function (hash) {\n        var asset = hashesMap[hash];\n\n        // Return if not in sectionAssets or in changed or moved array\n        if (sectionAssets.indexOf(asset) === -1 || changed.indexOf(asset) !== -1 || moved.indexOf(asset) !== -1) return;\n\n        var lastAsset = lastMap[hash];\n\n        if (lastAsset && lastUrls.indexOf(lastAsset) !== -1) {\n          moved.push([lastAsset, asset]);\n        } else {\n          changed.push(asset);\n        }\n      });\n\n      logGroup('Changed assets: ' + section, changed);\n      logGroup('Moved assets: ' + section, moved);\n\n      var movedResponses = Promise.all(moved.map(function (pair) {\n        return lastCache.match(pair[0]).then(function (response) {\n          return [pair[1], response];\n        });\n      }));\n\n      return caches.open(CACHE_NAME).then(function (cache) {\n        var move = movedResponses.then(function (responses) {\n          return Promise.all(responses.map(function (pair) {\n            return cache.put(pair[0], pair[1]);\n          }));\n        });\n\n        return Promise.all([move, addAllNormalized(cache, changed, {\n          bust: params.version,\n          request: params.prefetchRequest\n        })]);\n      });\n    });\n  }\n\n  function deleteObsolete() {\n    return caches.keys().then(function (keys) {\n      var all = keys.map(function (key) {\n        if (key.indexOf(CACHE_PREFIX) !== 0 || key.indexOf(CACHE_NAME) === 0) return;\n\n        console.log('[SW]:', 'Delete cache:', key);\n        return caches['delete'](key);\n      });\n\n      return Promise.all(all);\n    });\n  }\n\n  function getLastCache() {\n    return caches.keys().then(function (keys) {\n      var index = keys.length;\n      var key = undefined;\n\n      while (index--) {\n        key = keys[index];\n\n        if (key.indexOf(CACHE_PREFIX) === 0) {\n          break;\n        }\n      }\n\n      if (!key) return;\n\n      var cache = undefined;\n\n      return caches.open(key).then(function (_cache) {\n        cache = _cache;\n        return _cache.match(new URL(STORED_DATA_KEY, location).toString());\n      }).then(function (response) {\n        if (!response) return;\n\n        return Promise.all([cache, cache.keys(), response.json()]);\n      });\n    });\n  }\n\n  function storeCacheData() {\n    return caches.open(CACHE_NAME).then(function (cache) {\n      var data = new Response(JSON.stringify({\n        version: params.version,\n        hashmap: hashesMap\n      }));\n\n      return cache.put(new URL(STORED_DATA_KEY, location).toString(), data);\n    });\n  }\n\n  self.addEventListener('fetch', function (event) {\n    var requestUrl = event.request.url;\n    var url = new URL(requestUrl);\n    var urlString = undefined;\n\n    if (externals.indexOf(requestUrl) !== -1) {\n      urlString = requestUrl;\n    } else {\n      url.search = '';\n      urlString = url.toString();\n    }\n\n    // Handle only GET requests\n    var isGET = event.request.method === 'GET';\n    var assetMatches = allAssets.indexOf(urlString) !== -1;\n    var cacheUrl = urlString;\n\n    if (!assetMatches) {\n      var cacheRewrite = matchCacheMap(event.request);\n\n      if (cacheRewrite) {\n        cacheUrl = cacheRewrite;\n        assetMatches = true;\n      }\n    }\n\n    if (!assetMatches && isGET) {\n      // If isn't a cached asset and is a navigation request,\n      // fallback to navigateFallbackURL if available\n      if (navigateFallbackURL && isNavigateRequest(event.request)) {\n        event.respondWith(handleNavigateFallback(fetch(event.request)));\n\n        return;\n      }\n    }\n\n    if (!assetMatches || !isGET) {\n      // Fix for https://twitter.com/wanderview/status/696819243262873600\n      if (url.origin !== location.origin && navigator.userAgent.indexOf('Firefox/44.') !== -1) {\n        event.respondWith(fetch(event.request));\n      }\n\n      return;\n    }\n\n    // Logic of caching / fetching is here\n    // * urlString -- url to match from the CACHE_NAME\n    // * event.request -- original Request to perform fetch() if necessary\n    var resource = undefined;\n\n    if (responseStrategy === 'network-first') {\n      resource = networkFirstResponse(event, urlString, cacheUrl);\n    }\n    // 'cache-first'\n    // (responseStrategy has been validated before)\n    else {\n        resource = cacheFirstResponse(event, urlString, cacheUrl);\n      }\n\n    if (navigateFallbackURL && isNavigateRequest(event.request)) {\n      resource = handleNavigateFallback(resource);\n    }\n\n    event.respondWith(resource);\n  });\n\n  self.addEventListener('message', function (e) {\n    var data = e.data;\n    if (!data) return;\n\n    switch (data.action) {\n      case 'skipWaiting':\n        {\n          if (self.skipWaiting) self.skipWaiting();\n        }break;\n    }\n  });\n\n  function cacheFirstResponse(event, urlString, cacheUrl) {\n    return cachesMatch(cacheUrl, CACHE_NAME).then(function (response) {\n      if (response) {\n        if (DEBUG) {\n          console.log('[SW]:', 'URL [' + cacheUrl + '](' + urlString + ') from cache');\n        }\n\n        return response;\n      }\n\n      // Load and cache known assets\n      var fetching = fetch(event.request).then(function (response) {\n        if (!response.ok) {\n          if (DEBUG) {\n            console.log('[SW]:', 'URL [' + urlString + '] wrong response: [' + response.status + '] ' + response.type);\n          }\n\n          return response;\n        }\n\n        if (DEBUG) {\n          console.log('[SW]:', 'URL [' + urlString + '] from network');\n        }\n\n        if (cacheUrl === urlString) {\n          (function () {\n            var responseClone = response.clone();\n\n            caches.open(CACHE_NAME).then(function (cache) {\n              return cache.put(urlString, responseClone);\n            }).then(function () {\n              console.log('[SW]:', 'Cache asset: ' + urlString);\n            });\n          })();\n        }\n\n        return response;\n      });\n\n      return fetching;\n    });\n  }\n\n  function networkFirstResponse(event, urlString, cacheUrl) {\n    return fetch(event.request).then(function (response) {\n      if (response.ok) {\n        if (DEBUG) {\n          console.log('[SW]:', 'URL [' + urlString + '] from network');\n        }\n\n        return response;\n      }\n\n      // Throw to reach the code in the catch below\n      throw new Error('Response is not ok');\n    })\n    // This needs to be in a catch() and not just in the then() above\n    // cause if your network is down, the fetch() will throw\n    ['catch'](function () {\n      if (DEBUG) {\n        console.log('[SW]:', 'URL [' + urlString + '] from cache if possible');\n      }\n\n      return cachesMatch(cacheUrl, CACHE_NAME);\n    });\n  }\n\n  function handleNavigateFallback(fetching) {\n    return fetching['catch'](function () {}).then(function (response) {\n      var isOk = response && response.ok;\n      var isRedirect = response && response.type === 'opaqueredirect';\n\n      if (isOk || isRedirect && !navigateFallbackForRedirects) {\n        return response;\n      }\n\n      if (DEBUG) {\n        console.log('[SW]:', 'Loading navigation fallback [' + navigateFallbackURL + '] from cache');\n      }\n\n      return cachesMatch(navigateFallbackURL, CACHE_NAME);\n    });\n  }\n\n  function mapAssets() {\n    Object.keys(assets).forEach(function (key) {\n      assets[key] = assets[key].map(function (path) {\n        var url = new URL(path, location);\n\n        if (externals.indexOf(path) === -1) {\n          url.search = '';\n        } else {\n          // Remove hash from possible passed externals\n          url.hash = '';\n        }\n\n        return url.toString();\n      });\n    });\n\n    Object.keys(loadersMap).forEach(function (key) {\n      loadersMap[key] = loadersMap[key].map(function (path) {\n        var url = new URL(path, location);\n\n        if (externals.indexOf(path) === -1) {\n          url.search = '';\n        } else {\n          // Remove hash from possible passed externals\n          url.hash = '';\n        }\n\n        return url.toString();\n      });\n    });\n\n    hashesMap = Object.keys(hashesMap).reduce(function (result, hash) {\n      var url = new URL(hashesMap[hash], location);\n      url.search = '';\n\n      result[hash] = url.toString();\n      return result;\n    }, {});\n\n    externals = externals.map(function (path) {\n      var url = new URL(path, location);\n      url.hash = '';\n\n      return url.toString();\n    });\n  }\n\n  function addAllNormalized(cache, requests, options) {\n    var allowLoaders = options.allowLoaders !== false;\n    var bustValue = options && options.bust;\n    var requestInit = options.request || {\n      credentials: 'omit',\n      mode: 'cors'\n    };\n\n    return Promise.all(requests.map(function (request) {\n      if (bustValue) {\n        request = applyCacheBust(request, bustValue);\n      }\n\n      return fetch(request, requestInit).then(fixRedirectedResponse);\n    })).then(function (responses) {\n      if (responses.some(function (response) {\n        return !response.ok;\n      })) {\n        return Promise.reject(new Error('Wrong response status'));\n      }\n\n      var extracted = [];\n      var addAll = responses.map(function (response, i) {\n        if (allowLoaders) {\n          extracted.push(extractAssetsWithLoaders(requests[i], response));\n        }\n\n        return cache.put(requests[i], response);\n      });\n\n      if (extracted.length) {\n        (function () {\n          var newOptions = copyObject(options);\n          newOptions.allowLoaders = false;\n\n          var waitAll = addAll;\n\n          addAll = Promise.all(extracted).then(function (all) {\n            var extractedRequests = [].concat.apply([], all);\n\n            if (requests.length) {\n              waitAll = waitAll.concat(addAllNormalized(cache, extractedRequests, newOptions));\n            }\n\n            return Promise.all(waitAll);\n          });\n        })();\n      } else {\n        addAll = Promise.all(addAll);\n      }\n\n      return addAll;\n    });\n  }\n\n  function extractAssetsWithLoaders(request, response) {\n    var all = Object.keys(loadersMap).map(function (key) {\n      var loader = loadersMap[key];\n\n      if (loader.indexOf(request) !== -1 && loaders[key]) {\n        return loaders[key](response.clone());\n      }\n    }).filter(function (a) {\n      return !!a;\n    });\n\n    return Promise.all(all).then(function (all) {\n      return [].concat.apply([], all);\n    });\n  }\n\n  function matchCacheMap(request) {\n    var urlString = request.url;\n    var url = new URL(urlString);\n\n    var requestType = undefined;\n\n    if (request.mode === 'navigate') {\n      requestType = 'navigate';\n    } else if (url.origin === location.origin) {\n      requestType = 'same-origin';\n    } else {\n      requestType = 'cross-origin';\n    }\n\n    for (var i = 0; i < cacheMaps.length; i++) {\n      var map = cacheMaps[i];\n\n      if (!map) continue;\n      if (map.requestTypes && map.requestTypes.indexOf(requestType) === -1) {\n        continue;\n      }\n\n      var newString = undefined;\n\n      if (typeof map.match === 'function') {\n        newString = map.match(url, request);\n      } else {\n        newString = urlString.replace(map.match, map.to);\n      }\n\n      if (newString && newString !== urlString) {\n        return newString;\n      }\n    }\n  }\n}\n\nfunction cachesMatch(request, cacheName) {\n  return caches.match(request, {\n    cacheName: cacheName\n  }).then(function (response) {\n    if (isNotRedirectedResponse()) {\n      return response;\n    }\n\n    // Fix already cached redirected responses\n    return fixRedirectedResponse(response).then(function (fixedResponse) {\n      return caches.open(cacheName).then(function (cache) {\n        return cache.put(request, fixedResponse);\n      }).then(function () {\n        return fixedResponse;\n      });\n    });\n  })\n  // Return void if error happened (cache not found)\n  ['catch'](function () {});\n}\n\nfunction applyCacheBust(asset, key) {\n  var hasQuery = asset.indexOf('?') !== -1;\n  return asset + (hasQuery ? '&' : '?') + '__uncache=' + encodeURIComponent(key);\n}\n\nfunction getClientsURLs() {\n  if (!self.clients) {\n    return Promise.resolve([]);\n  }\n\n  return self.clients.matchAll({\n    includeUncontrolled: true\n  }).then(function (clients) {\n    if (!clients.length) return [];\n\n    var result = [];\n\n    clients.forEach(function (client) {\n      var url = new URL(client.url);\n      url.search = '';\n      url.hash = '';\n      var urlString = url.toString();\n\n      if (!result.length || result.indexOf(urlString) === -1) {\n        result.push(urlString);\n      }\n    });\n\n    return result;\n  });\n}\n\nfunction isNavigateRequest(request) {\n  return request.mode === 'navigate' || request.headers.get('Upgrade-Insecure-Requests') || (request.headers.get('Accept') || '').indexOf('text/html') !== -1;\n}\n\nfunction isNotRedirectedResponse(response) {\n  return !response || !response.redirected || !response.ok || response.type === 'opaqueredirect';\n}\n\n// Based on https://github.com/GoogleChrome/sw-precache/pull/241/files#diff-3ee9060dc7a312c6a822cac63a8c630bR85\nfunction fixRedirectedResponse(response) {\n  if (isNotRedirectedResponse(response)) {\n    return Promise.resolve(response);\n  }\n\n  var body = 'body' in response ? Promise.resolve(response.body) : response.blob();\n\n  return body.then(function (data) {\n    return new Response(data, {\n      headers: response.headers,\n      status: response.status\n    });\n  });\n}\n\nfunction copyObject(original) {\n  return Object.keys(original).reduce(function (result, key) {\n    result[key] = original[key];\n    return result;\n  }, {});\n}\n\nfunction logGroup(title, assets) {\n  console.groupCollapsed('[SW]:', title);\n\n  assets.forEach(function (asset) {\n    console.log('Asset:', asset);\n  });\n\n  console.groupEnd();\n}"}